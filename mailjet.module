<?php

/*
 * @file
 * code for Mailjet module
 */

use Drupal\Component\Utility\Html;
use Symfony\Component\HttpFoundation\RedirectResponse;
use MailJet\MailJet;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Link;
use \Drupal\Core\Url;

$path = drupal_get_path('module', 'mailjet');
include $path . '/lib/mailjet-api-php/src/mailjet.api.inc';

/**
 * Redirects to external links.
 */
function mailjet_go_to_external_link($url) {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('overlay') && overlay_get_mode() == 'child') {
    unset($_GET['destination']);
    overlay_close_dialog($url, ['external' => TRUE]);
    $redirect = FALSE;
    return $redirect;
  }
  else {
    $redirect = $url;
    $response = new RedirectResponse($url);
    $response->send();
  }
}

/**
 * Registration alter callback.
 */
function _mailjet_register_alter_callback() {

  $config_mailjet = \Drupal::service('config.factory')
    ->getEditable('mailjet.settings');
  // include mailjet.api.inc
  if (isset($_POST['data']['apikey']) && !empty($_POST['data']['apikey']) && isset($_POST['data']['secretkey']) && !empty($_POST['data']['secretkey'])) {

    $config_mailjet->set('mailjet_active', TRUE);
    $config_mailjet->set('mailjet_username', $_POST['data']['apikey']);
    $config_mailjet->set('mailjet_password', $_POST['data']['secretkey']);
    $config_mailjet->save();

    $mailjet = new Mailjet1($_POST['data']['apikey'], $_POST['data']['secretkey']);
    $params = [
      'AllowedAccess' => 'campaigns,contacts,stats,pricing,account,reports',
      'method' => 'JSON',
      'APIKeyALT' => $mailjet->getAPIKey(),
      'TokenType' => 'iframe',
      'IsActive' => TRUE,
      'SentData' => serialize(['plugin' => 'drupal-3.0']),
    ];
    $response2 = $mailjet->apitoken($params)->getResponse();
    if ($response2->Count > 0) {
      $config_mailjet->set('APItoken', $response2->Data[0]->Token);
      $config_mailjet->save();
      mailjet_first_sync(mailjet_get_default_list_id(mailjet_new()));
    }
    else {
      drupal_set_message(t('Token was not generated! Please try again.'), 'error');
    }
  }

  if (strpos($_POST['data']['next_step_url'], 'welcome') !== FALSE) {
    $res = [
      "code" => 1, // necessary for Mailjet's system to proceed
      "continue" => TRUE,
      "exit_url" => 'admin/config/system/mailjet/api',
    ];

    echo json_encode($res);
    drupal_exit();
  }

  $res = [
    "code" => 1, // necessary for Mailjet's system to proceed
    "continue" => TRUE,
    "continue_address" => $_POST['data']['next_step_url'],
  ];

  echo json_encode($res);
  drupal_exit();
}

/**
 * Creates a new MailJet Object
 */
function mailjet_new() {
  $config_mailjet = \Drupal::config('mailjet.settings');

  if (!empty($config_mailjet->get('mailjet_active')) && !empty($config_mailjet->get('mailjet_username'))
    && !empty($config_mailjet->get('mailjet_password'))) {
    // include mailje.api.inc

    $key = trim($config_mailjet->get('mailjet_username'));
    $secret_key = trim($config_mailjet->get('mailjet_password'));

    $mj = new MailJet($key, $secret_key);

    return $mj;
  }
  if (!($key) && !($secret_key)) {
    drupal_set_message(t('You need to add your MailJet API details before you can continue!'), 'warning');
  }
  return FALSE;
}

/**
 * Get the user infos.
 *
 * @return boolean
 */
function mailjet_user_infos() {

  $mailjet = mailjet_new();
  if (!$mailjet) {
    // drupal_goto('admin/config/system/mailjet/api');
    return FALSE;
  }
  $paramsProfile = [
    'method' => 'GET',
  ];
  $response = $mailjet->myprofile($paramsProfile)->getResponse();

  $paramsUser = [
    'method' => 'GET',
  ];
  $responseUser = $mailjet->user($paramsUser)->getResponse();

  if ($response && isset($response->Count) && $response->Count > 0) {
    return array_merge((array) $response->Data[0], (array) $responseUser->Data[0]);
  }
  else {
    return FALSE;
  }
}

/**
 * Update the user infos.
 *
 * @param unknown $infos
 *
 * @return boolean
 */
function mailjet_mjuser_update($infos) {
  \Drupal::logger('my_module')->notice(print_r($infos, TRUE));
  $mailjet = mailjet_new();
  $infos['method'] = 'PUT';
  $response = $mailjet->myprofile($infos)->getResponse();
  return !empty($response->Count) ? TRUE : FALSE;
}

/**
 * User tracking check.
 */
function mailjet_user_trackingcheck() {
  $mailjet = mailjet_new();
  if (!$mailjet) {
    return FALSE;
  }
  $params = [
    'APIKey' => $mailjet->getAPIKey(),
  ];
  $response = $mailjet->eventcallbackurl($params)->getResponse();

  if ($response && isset($response->Count) && $response->Count > 0) {
    return $response;
  }
  elseif ($response && isset($response->Count) && $response->Count == 0) {
    return $response;
  }
  else {
    return FALSE;
  }
}

/**
 * Mailjet traging update.
 */
function mailjet_user_trackingupdate($tracking, $current_events) {

  $mailjet = mailjet_new();
  try {
    $check = ["open", "click", "bounce", "spam", "blocked", "unsub"];
    foreach ($tracking as $key => $value) {
      if (in_array($key, $check)) {
        if ($value == 1 && !array_key_exists($key, $current_events)) {
          $params = [
            'method' => 'JSON',
            'APIKeyALT' => $mailjet->getAPIKey(),
            'EventType' => $key,
            'Url' => $tracking['url'],
          ];
          $new_response = $mailjet->eventcallbackurl($params)->getResponse();
          unset($params);
          unset($new_response);
        }

        if ($value == 0 && array_key_exists($key, $current_events)) {
          $del_params = [
            'method' => 'DELETE',
            'ID' => $current_events[$key],
          ];

          $del_response = $mailjet->eventcallbackurl($del_params);
          unset($del_params);
          unset($del_response);
        }
      }
    }
    return TRUE;
  } catch (Exception $e) {
    return FALSE;
  }
}

/**
 * Returns a list of trusted domains.
 */
function mailjet_user_domain_list() {

  $mailjet = mailjet_new();
  $params = [
    'method' => 'GET',
    'style' => 'full',
    'limit' => 0,
  ];
  $response = $mailjet->sender($params)->getResponse();
  if ($response && isset($response->Count) && $response->Count > 0) {
    $domains = [];
    foreach ($response->Data as $sender) {
      if (!empty($sender->DNS) and !array_key_exists($sender->DNS->Domain, $domains) && strpos($sender->Email->Email, "*@") !== FALSE) {
        $domains[$sender->DNS->Domain] = $sender;
      }
    }
    return $domains;
  }
  else {
    return FALSE;
  }
}

/**
 * Gets trusted email domains.
 */
function mailjet_get_a_trusted_email() {
  $mailjet = mailjet_new();
  $system_site_config = \Drupal::config('system.site');

  $params = [
    'method' => 'GET',
    'style' => 'full',
  ];
  $response = $mailjet->sender($params)->getResponse();

  if ($response && isset($response->Count) && $response->Count > 0) {
    foreach ($response->Data as $emailObject) {
      if ($emailObject->Status == 'Active') {
        return $emailObject->Email->Email;
      }
    }
  }

  return $system_site_config->get('site_mail');
}

/**
 * Add a trusted domain
 *
 * @param unknown $domain
 *
 * @return boolean
 */
function mailjet_user_domain_add($domain) {
  $mailjet = mailjet_new();
  if (strpos($domain, '@') === FALSE) {
    $domain = '*@' . $domain;
  }

  $params = [
    'method' => 'JSON',
    'Email' => $domain,
  ];

  $response = $mailjet->sender($params)->getResponse();
  if ($response && isset($response->Count) && $response->Count > 0) {
    return TRUE;
  }
  else {
    drupal_set_message(t($response->ErrorMessage), 'error');
    return FALSE;
  }
}

/**
 * Check a domain
 *
 * @param unknown $domain
 *
 * @return boolean
 */
function mailjet_user_domain_status($domain) {
  $mailjet = mailjet_new();

  if (strpos($domain, '@') === FALSE) {
    $domain = '*@' . $domain;
  }

  $params = [
    'method' => 'JSON',
    'Email' => $domain,
  ];

  $response = $mailjet->sender($params)->getResponse();

  if ($response && isset($response->Count) && $response->Count > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Checks for same names.
 */
function _has_drupal_property($mailjet_property, $drupal_fields) {
  foreach ($drupal_fields as $key => $value) {
    if ($value['Name'] == $mailjet_property['Name']) {
      return TRUE;
    }
  }

  return FALSE;
}


function mailjet_properties_sync($newField = NULL, $delete = FALSE) {
  $config_mailjet = \Drupal::config('mailjet.settings');
  if (!($config_mailjet->get('mailjet_properties_sync', TRUE))) {
    return;
  }

  //get all user fields from Drupal system
  $user_fields = [];
  $user_info = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());;

  $counter = 0;
  foreach ($user_info as $key => $value) {

    if (strpos($key, "field_") !== FALSE) {
      $current_field = $user_info->getFieldDefinitions()[$key];

      $field_type = 'str';

      if ($current_field->getType() == "int") {
        $field_type = 'int';
      }
      if ($current_field->getType() == "float") {
        $field_type = 'float';
      }


      $user_fields[] = [
        "Name" => str_replace('field_', '', $key),
        "Datatype" => $field_type,
      ];
    }
  }

  if ($newField) {
    if ($delete === FALSE) {
      $field_type = 'str';
      if ($newField['type'] == "int") {
        $field_type = 'int';
      }
      if ($newField['type'] == "float") {
        $field_type = 'float';
      }

      $user_fields[] = [
        "Name" => str_replace('field_', '', $newField['field_name']),
        "Datatype" => $field_type,
      ];
    }
    else {
      foreach ($user_fields as $key => $value) {
        if ($value['Name'] === 'field_' . $newField['field_name']) {
          unset($user_fields[$key]);
        }
      }
    }
  }

  //get existing contact properties from MailJet
  $properties = [];
  $mj = mailjet_new();
  $params = [
    'method' => 'GET',
    'limit' => 0,
  ];
  $response = $mj->ContactMetaData($params)->getResponse();
  if ($response && isset($response->Count) && $response->Count >= 0) {
    foreach ($response->Data as $property) {
      $properties[$property->Name] = (array) $property;
    }
  }
  else {
    drupal_set_message(t('Couldn\'t reach MailJet to retrieve existing contact properties! Please try again later or contact MailJet!'), 'error');
  }

  //sync Drupal fields to MJ properties
  foreach ($user_fields as $field) {
    if (array_key_exists($field['Name'], $properties)) {
      if ($field['Datatype'] == $properties[$field['Name']]['Datatype']) {
        //drupal_set_message(t('Field '.$field['Name'].' is already in your MailJet account.'),'status'); // no need of this message - too much spam :)
      }
      else {
        $updateParams = [
          'method' => 'JSON',
          'ID' => $properties[$field['Name']]['ID'],
          'Name' => $field['Name'],
          'DataType' => $field['Datatype'],
        ];
        $updateResponse = $mj->ContactMetaData($updateParams)->getResponse();
        if ($updateResponse && $updateResponse->Count >= 0) {
          drupal_set_message(t('Field ' . $field['Name'] . ' in now updated in your MailJet account!'), 'status');
        }
        else {
          drupal_set_message(t('Couldn\'t update ' . $field['Name'] . ' in your MailJet account!'), 'error');
        }
      }
    }
    else {
      $insertParams = [
        'method' => 'JSON',
        'Name' => $field['Name'],
        'DataType' => $field['Datatype'],
        'NameSpace' => 'static',
      ];
      $insertResponse = $mj->ContactMetaData($insertParams)->getResponse();
      if ($insertResponse && $insertResponse->Count >= 0) {
        drupal_set_message(t('Field ' . $field['Name'] . ' in now inserted in your MailJet account!'), 'status');
      }
      else {
        drupal_set_message(t('Couldn\'t update ' . $field['Name'] . ' in your MailJet account!'), 'error');
      }
    }
  }
  return;
}


function mailjet_sync_single_user($infos, $type) {
  $config_mailjet = \Drupal::config('mailjet.settings');
  if (!($config_mailjet->get('mailjet_properties_sync', TRUE))) {
    return;
  }

  mailjet_properties_sync();
  $mailjet = mailjet_new();

  $user = get_sync_info($infos);
  $mj_lists = [];
  if (is_array($user) && isset($infos['mail']) && isset($user[$infos['mail']])) {
    $mj_lists = explode(",", $user[$infos['mail']]['mj_lists']);
    $mj_lists = array_diff($mj_lists, ['']);
  }
  //if (!empty($defaul_mj_list)) {
  $mj_lists[] = mailjet_get_default_list_id($mailjet);
  //}

  switch ($type) {
    case 'add':
      foreach ($mj_lists as $key => $value) {
        //add new email
        $add_params = [
          'method' => 'POST',
          'Action' => 'Add',
          'Force' => TRUE,
          'Addresses' => [$infos['mail']],
          'ListID' => $value,
        ];
        $mailjet->resetRequest();
        $response = $mailjet->manycontacts($add_params)->getResponse();
        if ($response && isset($response->Count) && $response->Count > 0) {

          \Drupal::logger('mailjet_messages')
            ->notice(t('The new contact was added to list #' . $value . '.'));
          $contactID = $response->Data[0]->Recipients->Items[0]->Contact->ID;

          // Get the data which we have to update. The data will be extracted from the user's object or $info variable
          $data = [];
          if (is_array($user) && isset($user[$infos['mail']])) {
            foreach ($user[$infos['mail']]['properties'] as $prop_key => $prop_value) {
              $data[] = [
                'Name' => str_replace("field_", "", $prop_key),
                'Value' => $prop_value,
              ];
            }
          }
          else {
            foreach ($infos as $key => $info) {
              if (strpos($key, 'field_') !== FALSE && isset($info['und'][0]['value'])) {
                $data[] = [
                  'Name' => str_replace("field_", "", $key),
                  'Value' => $info['und'][0]['value'],
                ];
              }
            }
          }
          if (!empty($data)) {
            $data_params = [
              'method' => 'JSON',
              'ContactID' => $contactID,
              'ID' => $contactID,
              'Data' => $data,
            ];
            $mailjet->resetRequest();
            $response = $mailjet->contactdata($data_params)->getResponse();
            if ($response && isset($response->Count) && $response->Count > 0) {
              drupal_set_message(t('Contact data was synced.'), 'status');
            }
            else {
              drupal_set_message(t('Contact data was not synced.'), 'error');
            }
          }
        }
        else {
          \Drupal::logger('mailjet_messages')
            ->notice(t('The new contact was not added to list #' . $value . '.'));
        }
      }
      break;
    case 'update':
      if (isset($infos['mail']) && $infos['mail'] != $infos['original']->mail) {
        foreach ($mj_lists as $key => $value) {
          //add new email
          $add_params = [
            'method' => 'POST',
            'Action' => 'Add',
            'Force' => TRUE,
            'Addresses' => [$infos['mail']],
            'ListID' => $value,
          ];

          $mailjet->resetRequest();
          $response = $mailjet->manycontacts($add_params)->getResponse();

          if ($response && isset($response->Count) && $response->Count > 0) {
            \Drupal::logger('mailjet_messages')
              ->notice(t('The new contact was added to list #' . $value . '.'));
            $contactID = $response->Data[0]->Recipients->Items[0]->Contact->ID;

            // Get the data which we have to update. The data will be extracted from the user's object or $info variable
            $data = [];
            if (is_array($user) && isset($user[$infos['mail']])) {
              foreach ($user[$infos['mail']]['properties'] as $prop_key => $prop_value) {
                $data[] = [
                  'Name' => str_replace("field_", "", $prop_key),
                  'Value' => $prop_value,
                ];
              }
            }
            else {
              foreach ($infos as $key => $info) {
                if (strpos($key, 'field_') !== FALSE && isset($info['und'][0]['value'])) {
                  $data[] = [
                    'Name' => str_replace("field_", "", $key),
                    'Value' => $info['und'][0]['value'],
                  ];
                }
              }
            }
            if (!empty($data)) {
              $data_params = [
                'method' => 'JSON',
                'ContactID' => $contactID,
                'ID' => $contactID,
                'Data' => $data,
              ];
              $mailjet->resetRequest();
              $response = $mailjet->contactdata($data_params)->getResponse();
              if ($response && isset($response->Count) && $response->Count > 0) {
                drupal_set_message(t('Contact data was synced.'), 'status');
              }
              else {
                drupal_set_message(t('Contact data was not synced.'), 'error');
              }
            }
          }
          else {
            \Drupal::logger('mailjet_messages')
              ->notice(t('The new contact was not added to list #' . $value . '.'));
          }

          $unsub_params = [
            'method' => 'POST',
            'Action' => 'Unsubscribe',
            'Addresses' => [$infos['original']->mail],
            'ListID' => $value,
          ];

          $mailjet->resetRequest();
          $response = $mailjet->manycontacts($unsub_params)->getResponse();

          if ($response && isset($response->Count) && $response->Count > 0) {
            \Drupal::logger('mailjet_messages')
              ->notice(t('The contact was unsubscribed to list #' . $value . '.'));
          }
          else {
            \Drupal::logger('mailjet_messages')
              ->notice(t('The new contact was not added to list #' . $value . '.'));
          }
        }
      }
      else {
        //get contact ID
        if (empty($infos['mail'])) {
          return;
        }
        $contact_params = [
          'method' => 'GET',
          'ID' => $infos['mail'],
        ];
        $mailjet->resetRequest();
        $response = $mailjet->contact($contact_params)->getResponse();

        if ($response && isset($response->Count) && $response->Count == 1) {
          $contactID = $response->Data[0]->ID;

          // Get the data which we have to update. The data will be extracted from the user's object or $info variable
          $data = [];
          if (is_array($user) && isset($user[$infos['mail']])) {
            foreach ($user[$infos['mail']]['properties'] as $prop_key => $prop_value) {
              $data[] = [
                'Name' => str_replace("field_", "", $prop_key),
                'Value' => $prop_value,
              ];
            }
          }
          else {
            foreach ($infos as $key => $info) {
              if (strpos($key, 'field_') !== FALSE && isset($info['und'][0]['value'])) {
                $data[] = [
                  'Name' => str_replace("field_", "", $key),
                  'Value' => $info['und'][0]['value'],
                ];
              }
            }
          }
          if (!empty($data)) {
            $data_params = [
              'method' => 'JSON',
              'ContactID' => $contactID,
              'ID' => $contactID,
              'Data' => $data,
            ];
            $mailjet->resetRequest();
            $response = $mailjet->contactdata($data_params)->getResponse();
            if ($response && isset($response->Count) && $response->Count > 0) {
              drupal_set_message(t('Contact data was synced.'), 'status');
            }
            else {
              drupal_set_message(t('Contact data was not synced.'), 'error');
            }
          }
        }
        else {
          drupal_set_message(t('Could not get contact info from Mailjet.'), 'error');
        }
      }
      break;
    case 'remove':
      if (empty($infos['mail'])) {
        return;
      }
      foreach ($mj_lists as $key => $value) {
        $unsub_params = [
          'method' => 'POST',
          'Action' => 'Unsubscribe',
          'Addresses' => [$infos['mail']],
          'ListID' => $value,
        ];
        $mailjet->resetRequest();
        $response = $mailjet->manycontacts($unsub_params)->getResponse();
        if ($response && isset($response->Count) && $response->Count > 0) {
          \Drupal::logger('mailjet_messages')
            ->notice(t('The new contact was unsubscribed from list #' . $value . '.'));
        }
        else {
          \Drupal::logger('mailjet_messages')
            ->notice(t('The new contact was not unsubscribed from list #' . $value . '.'));
        }
      }
      break;
    default:
      drupal_set_message(t("No user action"), "warning");
      break;
  }
}

/**
 * Checks if batch process is running.
 */
function is_batchjob_running($bjID) {
  $config_mailjet = \Drupal::config('mailjet.settings');
  $mailjet = mailjet_new();
  $paramsBatchJobCheck = [
    'method' => 'GET', // JSON
    'ID' => $bjID,
    'APIKeyALT' => $config_mailjet->get('mailjet_username'),
  ];
  $mailjet->resetRequest();
  $responseBatchJobCheck = $mailjet->batchjob($paramsBatchJobCheck)
    ->getResponse();

  if (!empty($responseBatchJobCheck->Data[0]->Status) && $responseBatchJobCheck->Data[0]->Status == "Completed") {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Gets Mailjet list id.
 */
function mailjet_get_default_list_id($mailjet) {
  $getlist_params = [
    'method' => 'GET',
    'Name' => mailjet_get_default_list_name(),
  ];
  $mailjet->resetRequest();
  // Gets Mailjet contact list by name
  $contactLists = $mailjet->contactslist($getlist_params)->getResponse();
  if ($contactLists && $contactLists->Count > 0) {
    $def_list_id = $contactLists->Data[0]->ID;
  }
  return empty($def_list_id) ? mailjet_create_default_list($mailjet) : $def_list_id;
}

function mailjet_get_default_list_name() {
  return 'Drupal contact list';
}

/**
 * Create the default Drupal contact list if not existing.
 */
function mailjet_create_default_list($mailjet) {
  $listparams = [
    'method' => 'JSON',
    'Name' => mailjet_get_default_list_name(),
  ];
  $mailjet->resetRequest();
  $response3 = $mailjet->contactslist($listparams)->getResponse();
  if ($response3 && $response3->Count > 0) {
    $def_list_id = $response3->Data[0]->ID;
    drupal_set_message(t('Default list was created!'), 'status');
  }
  else {
    drupal_set_message(t('Default list was not created! Please try again.'), 'error');
  }
  return empty($def_list_id) ? 0 : $def_list_id;
}

/**
 * Creates mailjet field.
 */
function mailjet_field_create_field($field) {
  mailjet_properties_sync($field);
}

/**
 * Deletes mailjet field.
 */
function mailjet_field_delete_field($field) {
  mailjet_properties_sync($field, TRUE);
}

/**
 * Sync lists.
 */
function mailjet_first_sync($list_id) {
  $config_mailjet = \Drupal::service('config.factory')
    ->getEditable('mailjet.settings');

  mailjet_properties_sync();

  //get all drupal users
  //$users = entity_load('user');
  $users = \Drupal::service('entity_type.manager')->getStorage('user');

  $csv_str = "email,";
  $cnt = 0;
  foreach ($users as $user_id => $user) {
    if ($user_id > 0 && $user->status > 0) {
      foreach ($user as $key => $value) {
        //ADD ALL FIELDS
        if (strpos($key, "field_") !== FALSE) {
          if ($cnt < 1) {
            $csv_str .= str_replace('field_', '', $key) . ",";
          }
        }
      }
      $csv_str = substr($csv_str, 0, -1);
      $csv_str .= "\n";

      $csv_str .= $user->mail . ",";
      foreach ($user as $key => $value) {
        //ADD ALL FIELDS
        if (strpos($key, "field_") !== FALSE) {
          $csv_str .= ((!empty($value)) ? $value[LANGUAGE_NONE][0]['value'] : '') . ",";
        }
      }
      $csv_str = substr($csv_str, 0, -1);
      $csv_str .= "\n";
      $cnt++;
    }
  }

  $mailjet = mailjet_new();
  //call to dataAPI to create the CSV
  $mailjet->resetRequest();
  $response_csv_data = $mailjet->data('contactslist', $list_id, 'CSVData', 'text/plain', $csv_str, 'POST', NULL)
    ->getResponse();

  if ($response_csv_data) {
    $clid = json_decode($response_csv_data);

    $mailjet->resetRequest();
    $params_batch_job = [
      'method' => 'JSON', // JSON
      'JobType' => 'Contact list import csv',
      'DataID' => $clid->ID,
      'Status' => 'Upload',
      'RefId' => $list_id,
      'Method' => 'addnoforce', // = 'addforce'
      'APIKeyALT' => $config_mailjet->get('mailjet_username'),
    ];

    $response_batch_job = $mailjet->batchjob($params_batch_job)->getResponse();

    if ($response_batch_job && $response_batch_job->Count > 0) {
      $bj_id = $response_batch_job->Data[0]->ID;
      $params_batch_job_check = [
        'method' => 'GET', // JSON
        'ID' => $bj_id,
        'APIKeyALT' => $config_mailjet->get('mailjet_username'),
      ];
      $mailjet->resetRequest();
      $response_batch_job_check = $mailjet->batchjob($params_batch_job_check)
        ->getResponse();

      if ($response_batch_job_check && $response_batch_job_check->Data[0]->Status == "Completed") {
        drupal_set_message(t('Sync is complete.'), 'status');
      }
      else {
        $bj_ids = $config_mailjet->get('runningBtachJobs', []);
        $bj_ids[] = $bj_id;
        $config_mailjet->set('runningBtachJobs', $bj_ids);

        drupal_set_message(t('Sync in progress.'), 'status');
      }
    }
    else {
      drupal_set_message(t('Could not create a BatchJob for this import'));
    }
  }
  else {
    drupal_set_message(t('Could not create the contact list'));
  }

  $config_mailjet->save();
}

function  get_mailjet_get_lists_limit() {
    return 500;
}

// Getter functions - LISTS and Properties
function mailjet_get_lists() {
  $contact_lists2 = [];

  $mailjet = mailjet_new();
  $counter_contact = 0;
  $getlist_params = [
    'method' => 'GET',
    'limit' => get_mailjet_get_lists_limit(),
  ];
  $contact_lists = $mailjet->contactslist($getlist_params)->getResponse();
  if (!empty($contact_lists) && is_array($contact_lists->Data)) {
    foreach ($contact_lists->Data as $list) {
      $contact_lists2[$list->ID] = $list->Name;
      $counter_contact++;
    }
  }

  return $contact_lists2;
}

function mailjet_get_properties() {
  //get existing contact properties from MailJet
  $properties = [];


  $mj = mailjet_new();
  $params = [
    'method' => 'GET',
    'limit' => 0,
  ];
  $response = $mj->ContactMetaData($params)->getResponse();
  if ($response && isset($response->Count) && $response->Count >= 0) {
    foreach ($response->Data as $property) {
      $properties[$property->Name] = $property->Name;
    }
  }


  return $properties;
}

function mailjet_help($path, $arg) {
  switch ($path) {
    case 'admin/help#mailjet' :
      return t('Send your emails by your Mailjet API.');
  }
}

/**
 * Implements hook_mail().
 */
function mailjet_mail($key, &$message, $params) {

  $options = [
    'langcode' => $message['langcode'],
  ];

  switch ($key) {
    case 'test_mail':
      $message['subject'] = t('Your test mail from Mailjet', $options);
      $message['body'][] = Html::escape($params['message']);
      break;
    case 'activation_mail':
      $message['subject'] = t('Activatin mail', $options);
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements function for find a contact in some contact list
 */
function mailjet_find_conctact($email, $list_id) {
  $mj = mailjet_new();
  $response = TRUE;


  $contact_params = [
    'method' => 'GET',
    'ContactEmail' => $email,
    'ContactsList' => $list_id,
  ];

  $result = $mj->listrecipient($contact_params);

  // 1 - unsubscribed, !=1 - subscribed

  if ($result->getResponse()->Count < 1) {
    $response = FALSE;
  }

  if (!empty($result->getResponse()->Data) && $result->getResponse()->Data[0]->IsUnsubscribed == 1) {
    $response = FALSE;
  }


  return $response;
}

function prepare_mail_template($email_header, $email_text_button, $email_description, $email_footer, $email_owner, $url, $email_description_footer) {

  global $base_url;
  $tempalate = '<div style="width: 100%; background-color: white; box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.35);">
    <table class="mockup-content paint-area" style="background-color: white; font-family: Ubuntu, Helvetica; border-collapse: collapse; width: 100%;">
        <tbody>
        <tr style="text-align: center; padding: 0 0 20px 0;">
            <td style="height: 75px; line-height: 75px; width: 100%; vertical-align: middle;">
                <span id="opt-in-subscribe-title" class="paint-area paint-area--text" contenteditable="true" style="font-family: Ubuntu, Helvetica; font-size: 18px; color: #333333; line-height: normal;"><b class="medium-b">' . $email_header . '</b></span>
            </td>
        </tr>
        <tr>
            <td style="height: 75px; line-height: 75px; width: 100%; vertical-align: middle; padding: 0 60px;">
                <div id="opt-in-display-text" class="paint-area paint-area--text" style="text-align: center; color: grey; margin-bottom: 25px; line-height: normal;" contenteditable="true">' . $base_url . '</div></td></tr>
        <tr>
            <td><a rel="notrack" class="subscribe" href="' . $url . '" style="text-align: center;display: block;color: white;font-weight: 500;
                font-size: 15px;background-color: #3da7ea;text-transform: uppercase;text-decoration: none;width: 260px;margin:
                auto;border-radius: 5px;padding: 16px;">' . $email_text_button . '</a></td>
        </tr>
        <tr>
            <td style="padding: 30px;" >
                <span style="text-align: center;display: block; font-weight:bold; font-size:14px; text-decoration: none;">' . $email_description . '</span> <br />
                <a rel="notrack" class="subscribe" href="' . $url . '" style="text-align: center;display: block;color: black; font-size: 12px; text-decoration: underline; margin: auto;">
                   ' . $url . '
                </a>
            </td>
        </tr>
       
	    <tr><td style="text-align: left; height: 75px; line-height: 75px; width: 100%; vertical-align: middle; padding: 0 60px;"><div id="opt-in-footer" class="paint-area paint-area--text" contenteditable="true" style="display: inline-block; font-family: Ubuntu, Helvetica; text-align: left; margin-bottom: 24px; color: grey; line-height: normal;"><i class="medium-i">' . $email_description_footer . '</i></div></td></tr>
      
	  
        <tr><td style="text-align: left; padding: 0 60px; height: 30px; line-height: 30px;"><div id="opt-in-signature-top" class="paint-area paint-area--text" contenteditable="true" style="font-family: Ubuntu, Helvetica; display: inline-block; text-align: left; color: grey; line-height: normal;">' . $email_footer . '</div></td></tr>
        <tr><td style="text-align: left; padding: 0 60px; height: 30px; line-height: 30px;"><div id="opt-in-signature-bottom" class="paint-area paint-area--text" contenteditable="true" style="font-family: Ubuntu, Helvetica; display: inline-block; text-align: left; color: grey; line-height: normal;"><b class="medium-b">' . $email_owner . '</b></div></td></tr>
        </tbody>
    </table>
</div>';

  return $tempalate;
}

function mailjet_validate_entity_form(array &$form, FormStateInterface $form_state) {
  $form_values = $form_state->getValues();

  if (count($form_values['fields_mailjet']) > 3) {
    $form_state->setErrorByName('fields_mailjet', t('Please note that currently you may have a maximum of 3 contact properties in your subscribe form block. Reduce your selected contact properties.'));
  }
}

function mailjet_get_propertiy_type($property_name) {
  //get existing contact properties from MailJet
  $properties = [];
  $mj = mailjet_new();
  $params = [
    'method' => 'GET',
    'limit' => 0,
  ];
  $response = $mj->ContactMetaData($params)->getResponse();
  if ($response && isset($response->Count) && $response->Count >= 0) {
    foreach ($response->Data as $property) {

      if ($property->Name == $property_name) {
        return $property->Datatype;
        break;
      }
    }
  }
}

function mailjet_get_property_name($id) {
  $mailjet_properties = mailjet_get_properties();
  $counter_prop = 0;

  foreach ($mailjet_properties as $key => $prop) {

    if (strpos($prop, 'message') !== FALSE) {
      unset($mailjet_properties[$key]);
    }
    elseif (strpos($prop, 'commerce') !== FALSE) {
      unset($mailjet_properties[$key]);
    }
    elseif (strpos($prop, 'mailjet') !== FALSE) {
      unset($mailjet_properties[$key]);
    }
    elseif (strpos($prop, 'signup') !== FALSE) {
      unset($mailjet_properties[$key]);
    }
  }

  $conctact_prop = [];
  foreach ($mailjet_properties as $key => $prop) {
    $contact_prop[$counter_prop] = $prop;
    $counter_prop++;
  }

  return $contact_prop[$id];
}

function mailjet_menu_local_actions_alter(&$local_actions) {

  $menu_action_links = [];
  $counter = 0;

  foreach ($local_actions as $action_link) {

    switch ($action_link['id']) {

      case 'view.order.page_1':
        $menu_action_links[5]['route_name'] = $action_link['id'];
        $menu_action_links[5]['title'] = accessProtected($action_link['title'], 'string');
        $menu_action_links[5]['description'] = t('View the financial impact (total revenue and total number of sales) generated by each of your marketing campaigns');
        break;

      case 'mailjet_upgrade.page':
        $menu_action_links[7]['route_name'] = $action_link['id'];
        $menu_action_links[7]['title'] = accessProtected($action_link['title'], 'string');
        $menu_action_links[7]['description'] = t('Click here to change/upgrade your current plan');
        break;

      case 'mailjet_my_profile.page':
        $menu_action_links[6]['route_name'] = $action_link['id'];
        $menu_action_links[6]['title'] = accessProtected($action_link['title'], 'string');
        $menu_action_links[6]['description'] = t('Click here to change account settings, configure SPF and DKIM for optimized deliverability, etc.');
        break;

      case 'campaign.content':
        $menu_action_links[2]['route_name'] = $action_link['id'];
        $menu_action_links[2]['title'] = accessProtected($action_link['title'], 'string');
        $menu_action_links[2]['description'] = t('Click here to access the Mailjet drag-and-drop newsletter tool, templates and more for your marketing campaigns');
        break;

      case 'list.content':
        $menu_action_links[1]['route_name'] = $action_link['id'];
        $menu_action_links[1]['title'] = accessProtected($action_link['title'], 'string');
        $menu_action_links[1]['description'] = t('Click here to access the Mailjet contact lists');
        break;

      case 'stats.content':
        $menu_action_links[4]['route_name'] = $action_link['id'];
        $menu_action_links[4]['title'] = accessProtected($action_link['title'], 'string');
        $menu_action_links[4]['description'] = t('Click here to gain insight into your user engagement (Clicks, Opens, Geographies, User Agents, Unsubs, etc.)');
        break;

      case 'trigger_examples.content':
        $menu_action_links[3]['route_name'] = $action_link['id'];
        $menu_action_links[3]['title'] = accessProtected($action_link['title'], 'string');
        $menu_action_links[3]['description'] = t('Click here to define and activate different email marketing triggers (order reminder, purchase anniversary, etc.)');
        break;
    }
    $counter++;
  }
  ksort($menu_action_links);
  \Drupal::state()->set('mailjet_action_links', $menu_action_links);
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-action templates.
 */
function mailjet_preprocess_block(&$variables) {
  $variables['#cache']['contexts'][] = 'url';

  if ($_SERVER['REQUEST_URI'] == '/admin/config/system/mailjet/mailjet-panel') {

    $action_links = \Drupal::state()->get('mailjet_action_links');


    $output_html = '<br/><ul class="admin-list">';
    foreach ($action_links as $link) {

      $url = Url::fromRoute($link['route_name']);
      $internal_link = \Drupal::l($link['title'], $url);

      $output_html .= '<li><span class="label">' . accessProtected($internal_link, 'generatedLink') . '</span><span class="description">' . accessProtected($link['description'], 'string') . '</span></li> ';
    }
    $output_html .= '</ul>';


    $variables['content_menu']['#markup'] = $output_html;
  }
  else {
    $variables['content_menu'] = NULL;
  }
}

function mailjet_preprocess(&$variables) {

}

function accessProtected($obj, $prop) {
  $reflection = new ReflectionClass($obj);
  $property = $reflection->getProperty($prop);
  $property->setAccessible(TRUE);
  return $property->getValue($obj);
}

/**
 * Implements hook_theme_registry_alter
 */
function mailjet_theme_registry_alter(&$theme_registry) {

  $theme_registry['block__local_actions_block']['path'] = drupal_get_path('module', 'mailjet') . '/templates';
}

function mailjet_theme($existing, $type, $theme, $path) {

  return [
    'block__local_actions_block' => [
      'template' => 'block--local-actions-block',
    ],
  ];
} 
